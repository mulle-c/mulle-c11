//
//  mulle-c11-endian.h
//  mulle-c11
//
//  Copyright Â© 2024 Mulle kybernetiK. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//  Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright notice,
//  this list of conditions and the following disclaimer in the documentation
//  and/or other materials provided with the distribution.
//
//  Neither the name of Mulle kybernetiK nor the names of its contributors
//  may be used to endorse or promote products derived from this software
//  without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
//
#ifndef mulle_c11_endian_h__
#define mulle_c11_endian_h__

//
// Do this once here, other code should just use __LITTLE_ENDIAN__ or
// __BIG_ENDIAN__ from now on
//
// so use in your code:
//
// #if __LITTLE_ENDIAN__  // little end first (intel)
// #else
// #endif
//
// TODO: maybe rename to MULLE_C_LITTLE_ENDIAN, MULLE_C_BIG_ENDIAN ?

//
// try to get the "endian" header per platform, if we can't get well
// maybe its not a deal breaker (generated by AI)
//
#if defined(__linux__) || defined(__ANDROID__)
# include <endian.h>
// # warning "included <endian.h>"
#elif defined(__APPLE__)
# include <libkern/OSByteOrder.h>
// # warning "included <libkern/OSByteOrder.h>"
#elif defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__DragonFly__)
# include <sys/endian.h>
// # warning "included <sys/endian.h>"
#elif defined(_WIN32)
# include <winsock2.h>
// # warning "included <winsock2.h>"
#endif


#if ! defined(__LITTLE_ENDIAN__) && ! defined(__BIG_ENDIAN__)
// some say its __BYTE_ORDER__
# if defined( __BYTE_ORDER__) && defined( __ORDER_BIG_ENDIAN__)
#  if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
#   define __LITTLE_ENDIAN__  0
#   define __BIG_ENDIAN__     1
#  else
#   define __LITTLE_ENDIAN__  1
#   define __BIG_ENDIAN__     0
#  endif
# else
// some say its __BYTE_ORDER
#  if defined( __BYTE_ORDER) && defined( __ORDER_BIG_ENDIAN)
#   if __BYTE_ORDER == __ORDER_BIG_ENDIAN
#    define __LITTLE_ENDIAN__  0
#    define __BIG_ENDIAN__     1
#   else
#    define __LITTLE_ENDIAN__  1
#    define __BIG_ENDIAN__     0
#   endif
#  else
#   if defined( __LITTE_ENDIAN__) && defined( __BIG_ENDIAN__)
#    error Both __LITTLE_ENDIAN__ and __BIG_ENDIAN__ defined
#   else
#    ifdef _WIN32
#     define __LITTLE_ENDIAN__  1
#     define __BIG_ENDIAN__     0
#    else
#     error Neither __LITTLE_ENDIAN__ nor __BIG_ENDIAN__ defined
#    endif
#   endif
#  endif
# endif
#endif


#endif
