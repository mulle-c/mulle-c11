## Preprocessor Conveniences

| mulle-c11                      | Description                                        |
|--------------------------------|----------------------------------------------------|
| `MULLE_C_ASSERT`               | Perform a compile time assertion (must be placed inside a function)
| `MULLE_C_CONCAT`               | Concatenate the two given identifiers
| `MULLE_C_CONSTRUCTOR`          | Constructor function executed on load
| `MULLE_C_GLOBAL`               | Declare a global variable (`extern` on Unix, `declspec...` on Windows)
| `MULLE_C_STRINGIFY`            | Stringify the given identifier
| `__has_attribute( x)`          | If the compiler does not support `__has_attribute` this will always return 0
| `__has_builtin( x)`            | If the compiler does not support `__has_builtin` this will always return 0
| `__has_feature( x)`            | If the compiler does not support `__has_feature` this will always return 0


## Cross platform code generation hints

Some gcc builtins are provided, in case the compiler does not support them.

| mulle-c11                      | Description                                          |
|--------------------------------|------------------------------------------------------|
| `MULLE_C_LIKELY( expr)`        | Predict branch to be taken
| `MULLE_C_UNLIKELY( expr)`      | Predict branch not to be taken
| `MULLE_C_EXPECT( expr,value)`  | Special case when expression does not return 0 / 1 (or for style)| `mulle_c_popcount`   | Count the number of set bits in `unsigned int`                |
| `mulle_c_popcountl`            | Count the number of set bits in `unsigned long`      |
| `mulle_c_popcountll`           | Count the number of set bits in `unsigned long long` |


## Cross platform attributes

Compilation hints like  `__attribute__(( <name>))` are usually only available
for gcc and clang. These mulle-c11 macros allow compilation with other
compilers.

| Attribute         | mulle-c11                | Description                                        |
|-------------------|--------------------------|----------------------------------------------------|
| `always_inline`   | `MULLE_C_ALWAYS_INLINE`  | Force inlining of the annotated function
| `const`           | `MULLE_C_CONST`          | Mark the function return value as constant for same input
| `deprecated`      | `MULLE_C_DEPRECATED`     | Mark the function as deprecated
| `never_inline`    | `MULLE_C_NEVER_INLINE`   | Prevent inlining of the annotated function
| `nonnull`         | `MULLE_C_NONNULL_FIRST`  | Mark the first function parameter as not accepting NULL. There is also `MULLE_C_NONNULL_SECOND` and combinations like `MULLE_C_NONNULL_FIRST_FOURTH` up to five parameters
| `returns_nonnull` | `MULLE_C_NONNULL_RETURN` | Mark the function as never returning NULL
| `noreturn`        | `MULLE_C_NO_RETURN`      | Mark the function as not returning (e.g. abort)
| `pure`            | `MULLE_C_PURE`           | Mark the function as having no side effects
| `unused`          | `MULLE_C_UNUSED`         | Mark the parameter as unused

use `MULLE_C_ALWAYS_STATIC_INLINE` in your function definitions though, if
you want to keep windows happier:

``` c
MULLE_C_ALWAYS_STATIC_INLINE void  foo( void) {}
```


### Constructor / destructor functions

| mulle-c11                | Description                                        |
|--------------------------|----------------------------------------------------|
| `MULLE_C_CONSTRUCTOR`    | Constructor function executed on unload
| `MULLE_C_DESTRUCTOR`     | Destructor function executed on unload

Constructor functions are executed when the containing object
file is loaded. In a static executable, this is guaranteed before `main`.
In shared library environments, it depends on when the shared library is
loaded. Destructor functions are called before the unloading of the shared
library or before the exit of the executable.

``` c
MULLE_C_CONSTRUCTOR( load)
static void   load( void)
{
   printf( "load\n");
}
MULLE_C_DESTRUCTOR( unload)
static void   unload( void)
{
   printf( "unload\n");
}
```

`MULLE_C11_CONSTRUCTOR( f) void  f( void);` will expand differently, depending
on the compiler and operating system:

#### clang/gcc

``` c
__attribute__((constructor)) void  f( void);
```

#### MicroSoft Windows

``` c
static void f(void);
  __declspec(allocate(".CRT$XCU")) void (*f_)(void) = f;
  __pragma(comment(linker,"/include:" p "f_"))
```
