## Cross platform attributes

Compilation hints like  `__attribute__(( <name>))` are usually only available
for gcc and clang. These mulle-c11 macros allow compilation with other
compilers.

| Attribute         | mulle-c11                | Description                                        |
|-------------------|--------------------------|----------------------------------------------------|
| `always_inline`   | `MULLE_C_ALWAYS_INLINE`  | Force inlining of function                         |
| `const`           | `MULLE_C_CONST`          | Mark function return value as constant given same input parameters  |
| `deprecated`      | `MULLE_C_DEPRECATED`     | Mark function as deprecated                        |
| `never_inline`    | `MULLE_C_NEVER_INLINE`   | Prevent inlining of function                       |
| `nonnull`         | `MULLE_C_NONNULL_FIRST`  | Marks first function parameter as not accepting NULL. There is also `MULLE_C_NONNULL_SECOND` and combinations like `MULLE_C_NONNULL_FIRST_FOURTH` up to five parameters  |
| `noreturn`        | `MULLE_C_NO_RETURN`      | Mark function as not returning (e.g. `abort`)      |
| `returns_nonnull` | `MULLE_C_NONNULL_RETURN` | Mark function as never returning zero (NULL)       |

### Constructor/destructor example

Constructor functions are executed when the containing object
file is loaded. In a static executable, this is guaranteed before `main`.
In shared library environments, it depends on when the shared library is
loaded. Destructor functions are called before the unloading of the shared
library or before the exit of the executable.

``` c
MULLE_C_CONSTRUCTOR( load)
static void   load( void)
{
   printf( "load\n");
}
MULLE_C_DESTRUCTOR( unload)
static void   unload( void)
{
   printf( "unload\n");
}
```

`MULLE_C11_CONSTRUCTOR( f) void  f( void);` will expand differently, depending
on the compiler and operating system:

#### clang/gcc

``` c
__attribute__((constructor)) void  f( void);
```

#### MicroSoft Windows

``` c
static void f(void);
  __declspec(allocate(".CRT$XCU")) void (*f_)(void) = f;
  __pragma(comment(linker,"/include:" p "f_"))
```
